// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tiglabs/baudengine/master (interfaces: Store,Batch)

// Package master is a generated GoMock package.
package master

import (
	gomock "github.com/golang/mock/gomock"
	raftkvstore "github.com/tiglabs/baudengine/util/raftkvstore"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStore) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Delete mocks base method
func (m *MockStore) Delete(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockStore) Get(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0)
}

// GetLeaderAsync mocks base method
func (m *MockStore) GetLeaderAsync(arg0 chan *LeaderInfo) {
	m.ctrl.Call(m, "GetLeaderAsync", arg0)
}

// GetLeaderAsync indicates an expected call of GetLeaderAsync
func (mr *MockStoreMockRecorder) GetLeaderAsync(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderAsync", reflect.TypeOf((*MockStore)(nil).GetLeaderAsync), arg0)
}

// GetLeaderSync mocks base method
func (m *MockStore) GetLeaderSync() *LeaderInfo {
	ret := m.ctrl.Call(m, "GetLeaderSync")
	ret0, _ := ret[0].(*LeaderInfo)
	return ret0
}

// GetLeaderSync indicates an expected call of GetLeaderSync
func (mr *MockStoreMockRecorder) GetLeaderSync() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderSync", reflect.TypeOf((*MockStore)(nil).GetLeaderSync))
}

// NewBatch mocks base method
func (m *MockStore) NewBatch() Batch {
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockStoreMockRecorder) NewBatch() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockStore)(nil).NewBatch))
}

// Open mocks base method
func (m *MockStore) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockStoreMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStore)(nil).Open))
}

// Put mocks base method
func (m *MockStore) Put(arg0, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStoreMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStore)(nil).Put), arg0, arg1)
}

// Scan mocks base method
func (m *MockStore) Scan(arg0, arg1 []byte) raftkvstore.Iterator {
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].(raftkvstore.Iterator)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockStoreMockRecorder) Scan(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockStore)(nil).Scan), arg0, arg1)
}

// MockBatch is a mock of Batch interface
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockBatch) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockBatchMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBatch)(nil).Commit))
}

// Delete mocks base method
func (m *MockBatch) Delete(arg0 []byte) {
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete
func (mr *MockBatchMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBatch)(nil).Delete), arg0)
}

// Put mocks base method
func (m *MockBatch) Put(arg0, arg1 []byte) {
	m.ctrl.Call(m, "Put", arg0, arg1)
}

// Put indicates an expected call of Put
func (mr *MockBatchMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBatch)(nil).Put), arg0, arg1)
}
