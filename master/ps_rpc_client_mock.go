// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tiglabs/baudengine/master (interfaces: PSRpcClient)

// Package master is a generated GoMock package.
package master

import (
	gomock "github.com/golang/mock/gomock"
	metapb "github.com/tiglabs/baudengine/proto/metapb"
	reflect "reflect"
)

// MockPSRpcClient is a mock of PSRpcClient interface
type MockPSRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockPSRpcClientMockRecorder
}

// MockPSRpcClientMockRecorder is the mock recorder for MockPSRpcClient
type MockPSRpcClientMockRecorder struct {
	mock *MockPSRpcClient
}

// NewMockPSRpcClient creates a new mock instance
func NewMockPSRpcClient(ctrl *gomock.Controller) *MockPSRpcClient {
	mock := &MockPSRpcClient{ctrl: ctrl}
	mock.recorder = &MockPSRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPSRpcClient) EXPECT() *MockPSRpcClientMockRecorder {
	return m.recorder
}

// AddReplica mocks base method
func (m *MockPSRpcClient) AddReplica(arg0 string, arg1 uint64, arg2 *metapb.ReplicaAddrs, arg3 uint64, arg4 uint32) error {
	ret := m.ctrl.Call(m, "AddReplica", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica
func (mr *MockPSRpcClientMockRecorder) AddReplica(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockPSRpcClient)(nil).AddReplica), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method
func (m *MockPSRpcClient) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockPSRpcClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPSRpcClient)(nil).Close))
}

// CreatePartition mocks base method
func (m *MockPSRpcClient) CreatePartition(arg0 string, arg1 *metapb.Partition) error {
	ret := m.ctrl.Call(m, "CreatePartition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartition indicates an expected call of CreatePartition
func (mr *MockPSRpcClientMockRecorder) CreatePartition(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPSRpcClient)(nil).CreatePartition), arg0, arg1)
}

// DeletePartition mocks base method
func (m *MockPSRpcClient) DeletePartition(arg0 string, arg1 uint64) error {
	ret := m.ctrl.Call(m, "DeletePartition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartition indicates an expected call of DeletePartition
func (mr *MockPSRpcClientMockRecorder) DeletePartition(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartition", reflect.TypeOf((*MockPSRpcClient)(nil).DeletePartition), arg0, arg1)
}

// RemoveReplica mocks base method
func (m *MockPSRpcClient) RemoveReplica(arg0 string, arg1 uint64, arg2 *metapb.ReplicaAddrs, arg3 uint64, arg4 uint32) error {
	ret := m.ctrl.Call(m, "RemoveReplica", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplica indicates an expected call of RemoveReplica
func (mr *MockPSRpcClientMockRecorder) RemoveReplica(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockPSRpcClient)(nil).RemoveReplica), arg0, arg1, arg2, arg3, arg4)
}
